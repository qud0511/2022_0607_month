# --------------------------------------------------------------------------
# 리스트 자료형 (List)
# 여러 종류의 여러개 데이터를 저장하는 타입
# 여러개 데이터를 구별하기 위해서 인덱싱 (Indexing) 사용
# --------------------------------------------------------------------------

# 5명 정수를 저장하기
jumsu=[98, 90, 100, 30, 68, '100']

# 전체 데이터 모두 출력
print(f'jumsu => {jumsu}, type => {type(jumsu)}')

# 특정 요소만 출력 ==> 변수명[인덱스]
print(f'jumsu[0] => { jumsu[0] } , type => {type(jumsu[0])}')
# 리스트 안에 들어있다고 해서 타입도 리스트가 아님. 각각 요소는 본래의 타입임.
print(f'jumsu[0] => { jumsu[-1] } , type => {type(jumsu[-1])}')

# 1, 2, 3번 요소만 출력하기  ==> 변수명[시작인덱스:끝인덱스+1]
print(f'jumsu[0:3] => {jumsu[0:3]}')
print(f'{jumsu[0:3]}')

# 짝수번째 요소 출력하기
print(f'jumsu 짝수번째 요소 => {jumsu[0]}, {jumsu[2]}, {jumsu[4]}')
print(f'jumsu[0:6:2] => {jumsu[0:6:2]}, {jumsu[::2]}')

# 3의 배수 번째 요소만 출력하기 ==> 3번요소, 6번요소, 9번요소,....
print(f'jumsu[3::3] => {jumsu[3::3]}')      #??

print('\n')
# --------------------------------------------------------------------------

# 복잡한 데이터
data=[1,2,3,['a','b','c','d']]

# 리스트 데이터의 갯수 확인하는 내장 함수 ==>  len(변수명)             length
print(f'data의 갯수 : {len(data)}')
# 4개로 카운트함. 묶음을 하나로 취급함. 즉, ['a','b','c','d']는 하나로 취급됨.
print(f'data[0] : {data[0]}')
print(f'data[1] : {data[1]}')
print(f'data[2] : {data[2]}')
print(f'data[3] : {data[3]}')

# ['a','b','c','d']의 요소를 가져오고 싶을 때
print(f'data[3][0] : {data[3][0]}')
print(f'data[3][1] : {data[3][1]}')

# --------------------------------------------------------------------------
# 더 복잡한 데이터...
data=[1,2,3,['a','b',['가','나','다'],'c','d'],4,5,6,7]
# print(f'data[3][1][1] : {data[3][1][1]}')

# print(f'data[4][3][1] : {data[4][3][1]}') ???
















